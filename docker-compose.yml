# Service definitions for Trivia application
# - db: MySQL database server
# - redis: Cache and message broker
# - celery: Async task worker
# - web: Django API server
# - bot: Discord bot service

services:
  db:
    # MySQL database service configuration
    # Handles persistent data storage with configurable credentials
    image: mysql:8.0
    restart: always
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_ROOT_HOST: '%'
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql:delegated
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --skip-ssl
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
    networks:
      - app_network

  redis:
    # Redis service for caching and Celery broker
    # Configured with persistence and health checks
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
    networks:
      - app_network

  #celery:
    # Celery worker for async task processing
    # Handles background jobs like cleanup tasks
    # build: .
    # command: celery -A api worker -l info
    # volumes:
    #   - .:/app
    # depends_on:
    #   - redis
    #   - web

  web:
    build: .
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    environment:
      - DJANGO_SETTINGS_MODULE=api.django.${ENVIRONMENT:-development}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-True}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_HOST=db
      - MYSQL_PORT=3306
      - REDIS_URL=redis://redis:6379/1
      - CACHE_TTL=900
      - CACHE_KEY_PREFIX=trivia_api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      start_period: 30s  # Give more time for initial startup
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - app_network

  bot:
    # Discord bot service
    # Interfaces with Discord and communicates with API
    build:
      context: .
      dockerfile: Dockerfile
    entrypoint: ["./bot-entrypoint.sh"]
    volumes:
      - .:/app
    environment:
      - DJANGO_SETTINGS_MODULE=api.django.${ENVIRONMENT:-development}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-True}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_HOST=db
      - MYSQL_PORT=3306
      - DISCORD_KEY=${DISCORD_KEY}
    depends_on:
      web:
        condition: service_healthy
    networks:
      - app_network

volumes:
  mysql_data:
    driver: local
    name: trivia_mysql_data
  redis_data:
    driver: local
    name: trivia_redis_data

networks:
  app_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
